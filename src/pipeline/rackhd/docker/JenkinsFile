@Library('my_library') _



node{
    timestamps{

    Map ret_dict=[:]


    deleteDir()
    def manifest = new pipeline.common.Manifest()
    def share_method = new pipeline.common.ShareMethod()
    String manifest_path = ""
    if("${env.MANIFEST_FILE_URL}" == "null" || "${env.MANIFEST_FILE_URL}" == ""){
        stage("Generate Manifest"){
            String library_dir = "on-build-config"
            String work_dir = "b"
            share_method.checkoutOnBuildConfig(library_dir)
            manifest_path = manifest.generateManifestFromGithub(work_dir, library_dir)
        }
    } else{
        manifest_path = manifest.downloadManifest(MANIFEST_FILE_URL, "manifest")
    }
    archiveArtifacts "$manifest_path"
    def manifest_dict = manifest.stashManifest("manifest", manifest_path)

    //stage("first manifest"){
    //    def manifest= new pipeline.common.Manifest()
    //    manifest.downloadManifest(env.MANIFEST_URL, "my_manifest_v1")
    //    manifest_dict = [:]
    //    manifest_dict["stash_name"] = "manifest"
    //    manifest_dict["stash_path"] = "my_manifest_v1/manifest"
    //    stash name: manifest_dict["stash_name"], includes: manifest_dict["stash_path"]
    //}
       stage("Docker Build"){
            //def docker_builder = new pipeline.rackhd.docker.Build()
            //ret_dict =  docker_builder.build( env.MANIFEST_URL, env.CLONE_DIR, env.WORKSPACE)
            //sh """#!/bin/bash
            //echo "download docker images......"
            //wget -q http://10.62.59.175:8080/job/qiang/job/docker-refactor/58/artifact/rackhd_docker_images.tar -O rackhd_docker_images.tar
            //wget -q http://10.62.59.175:8080/job/qiang/job/docker-refactor/58/artifact/build_record -O build_record
            //"""
            ret_dict["DOCKER_STASH_NAME"]="docker"
            ret_dict["DOCKER_STASH_PATH"]="rackhd_docker_images.tar"
            ret_dict["DOCKER_RECORD_STASH_PATH"]="build_record"
       }


       stage("Function Test"){
            if ( env.TESTS != "" ){
                withCredentials([
                    usernamePassword(credentialsId: 'ff7ab8d2-e678-41ef-a46b-dd0e780030e1',
                    passwordVariable: 'SUDO_PASSWORD',
                    usernameVariable: 'SUDO_USER')
                ]) {
                    Map rackhd_host_cred=[:]
                    rackhd_host_cred["user"] = env.SUDO_USER
                    rackhd_host_cred["password"] = env.SUDO_PASSWORD
                    def function_test = new pipeline.rackhd.docker.FunctionTest()
                    env.TEST_STACK="virtual_stack"

                    def function_test_branches = [:]
                    ArrayList<String> used_resources = []
                    List tests = Arrays.asList( env.TESTS.split(','))
                    for(int i=0; i<tests.size(); i++){
                        String test_name = tests[i]
                        function_test_branches[test_name] = {
                            function_test.runTest( env.TEST_STACK, test_name, used_resources, manifest_dict, ret_dict, rackhd_host_cred)
                        }
                    }

                    try {
                        parallel function_test_branches
                        echo "parallel function_test_branches,huangqiang"
                   // } catch(error) {
                   //     echo "ERROR: funcition test... huangqiang:$error"
                    }finally {
                        echo "Finally,huangqiang"
                    }
                }
            }
        }

    }
}

