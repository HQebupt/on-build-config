@Library('my_library') _
node{
    deleteDir()
    def share_method = new pipeline.common.ShareMethod()
    try{
        def slave_name = "docker"
        node(slave_name){
            deleteDir()
            String library_dir = "on-build-config"
            share_method.checkoutOnBuildConfig(library_dir)
            stage("build base image"){
                withCredentials([
                    usernamePassword(credentialsId: 'ff7ab8d2-e678-41ef-a46b-dd0e780030e1',
                                     passwordVariable: 'SUDO_PASSWORD',
                                     usernameVariable: 'SUDO_USER'),
                    usernamePassword(credentialsId: 'rackhd-ci-docker-hub',
                         passwordVariable: 'DOCKERHUB_PASS',
                         usernameVariable: 'DOCKERHUB_USER')
                ]){
                    String docker_folder = library_dir + "/src/pipeline/rackhd/source_code/base_docker/"
                    sh """#!/bin/bash -ex
                    bash $library_dir/src/pipeline/rackhd/source_code/base_docker/build_base_image.sh \
                           --DOCKER_FOLDER ${docker_folder} \
                           --TARGET_PATH ${WORKSPACE} \
                           --USER ${SUDO_USER} \
                           --SUDO_PASSWORD ${SUDO_PASSWORD} \
                           --DOCKERHUB_USER ${DOCKERHUB_USER} \
                           --DOCKERHUB_PASS ${DOCKERHUB_PASS}
                    """
                    archiveArtifacts 'rackhd_pipeline_docker.tar'
                }
                currentBuild.result = "SUCCESS"
            }
        }
    } finally {
        if ("${currentBuild.result}" != "SUCCESS"){
            currentBuild.result = "FAILURE"
        }
        stage("Publish Result"){
            share_method.sendResultToSlack()
            share_method.sendResultToMysql(true, true)
        }
    }
}

