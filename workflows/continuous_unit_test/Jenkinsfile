@Library('my_library') _
node{
    timestamps{
        withEnv([
            "MANIFEST_FILE_URL=${env.MANIFEST_FILE_URL}"
        ]){
            deleteDir()
            def share_method = new pipeline.common.ShareMethod()
            def manifest = new pipeline.common.Manifest()
            String manifest_path = ""
            if("${env.MANIFEST_FILE_URL}" == "null" || "${env.MANIFEST_FILE_URL}" == ""){
                stage("Generate Manifest"){
                    String library_dir = "on-build-config"
                    String work_dir = "b"
                    share_method.checkoutOnBuildConfig(library_dir)
                    manifest_path = manifest.generateManifestFromGithub(work_dir, library_dir)
                }
            } else{
                manifest_path = manifest.downloadManifest(MANIFEST_FILE_URL, "manifest")
            }
            archiveArtifacts "$manifest_path"
            def manifest_dict = manifest.stashManifest("manifest", manifest_path)
            try{
                stage("Unit Test"){
                    ArrayList<String> used_resources = []
                    def test_repos = ["on-core", "on-tasks", "on-http", "on-syslog", "on-taskgraph", "on-dhcp-proxy", "on-tftp"]
                    def unit_test = new pipeline.rackhd.source_code.UnitTest()
                    def unit_test_branches = [:]
                    for(int i=0; i<test_repos.size; i++){
                        String repo_name = test_repos.get(i)
                        unit_test_branches["${repo_name}"] = {
                            if(repo_name == "on-http" || repo_name == "on-core"){
                                unit_test.runTestWithSudo(repo_name, manifest_dict, used_resources)
                            }else{
                                unit_test.runTestWithoutSudo(repo_name, manifest_dict, used_resources)
                            }
                        }
                    }
                    if(test_repos.size()>0){
                        parallel unit_test_branches
                    }
                }
                currentBuild.result = "SUCCESS"
            } finally{
                if ("${currentBuild.result}" != "SUCCESS"){
                    currentBuild.result = "FAILURE"
                }
                stage("Publish Result"){
                    share_method.sendResultToSlack()
                    share_method.sendResultToMysql(true, true)            
                }
            }
        }
    }
}

